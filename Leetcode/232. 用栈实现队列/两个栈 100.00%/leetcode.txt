class MyQueue {
    Deque<Integer> stackin;
    Deque<Integer> stackout;

    /** Initialize your data structure here. */
    public MyQueue() {
        stackin = new ArrayDeque<>();
        stackout = new ArrayDeque<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        stackin.addLast(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if (!stackout.isEmpty())
            return stackout.pollLast();
        while (!stackin.isEmpty()){
            stackout.addLast(stackin.pollLast());
        }
        return stackout.pollLast();
    }
    
    /** Get the front element. */
    public int peek() {
        if (!stackout.isEmpty())
            return stackout.peekLast();
        while (!stackin.isEmpty()){
            stackout.addLast(stackin.pollLast());
        }
        return stackout.peekLast();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if (stackin.isEmpty() && stackout.isEmpty())
            return true;
        return false;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */