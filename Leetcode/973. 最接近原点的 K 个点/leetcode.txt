class Solution {
    public int[][] kClosest(int[][] points, int K) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        PriorityQueue<int[]> distHeap = new PriorityQueue<int[]>((p1, p2) -> {
            int t1 = getDist(p1);
            int t2 = getDist(p2);
            if (t2 > t1)
                return 1;
            else if (t2 == t1)
                return 0;
            else
                return -1;
        });
        int index = 0;
        while (distHeap.size() < K) {
            distHeap.add(points[index++]);
        }
        for (int i = index; i < points.length; ++i) {
            if(getDist(points[i])<=getDist(distHeap.peek())){
                distHeap.poll();
                distHeap.add(points[i]);
            }
        }
        int[][] res=new int[distHeap.size()][2];
        int res_index=0;
        while (!distHeap.isEmpty())
        {
            res[res_index++]=distHeap.poll();
        }
        return res;
    }

    public int getDist(int[] point) {
        return (point[0] * point[0]) + (point[1] * point[1]);
    }
}