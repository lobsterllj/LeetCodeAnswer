/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void dfs(TreeNode root, Map val_father) {
        if (root == null)
            return;
        if (root.left != null) {
            val_father.put(root.left.val, root);
            dfs(root.left, val_father);
        }
        if (root.right != null) {
            val_father.put(root.right.val, root);
            dfs(root.right, val_father);
        }
    }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Map<Integer, TreeNode> val_father = new HashMap<>();
        Set<Integer> ancestor_p = new HashSet<>();
        dfs(root, val_father);
        ancestor_p.add(p.val);
        while (val_father.get(p.val) != null) {
            p = val_father.get(p.val);
            ancestor_p.add(p.val);
        }
        while (q != null) {
            if (ancestor_p.contains(q.val)) {
                return q;
            }
            q = val_father.get(q.val);
        }
        return null;
    }
}