class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        StringBuilder cache = new StringBuilder();
        int nl = n;
        int nr = n;
        recur(res, cache, nl, nr);

        return res;
    }

    public void recur(List<String> res, StringBuilder cache, int nl, int nr) {
        if (nr < nl || nl < 0 || nr < 0)
            return;

        if (nl == 0 && nr == 0) {
            res.add(cache.toString());
            return;
        }

        cache.append('(');
        recur(res, cache, nl - 1, nr);
        cache.deleteCharAt(cache.length() - 1);

        cache.append(')');
        recur(res, cache, nl, nr - 1);
        cache.deleteCharAt(cache.length() - 1);

    }
}