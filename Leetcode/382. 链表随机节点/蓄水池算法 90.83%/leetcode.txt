/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private List<Integer> k8;
    ListNode node;

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        k8 = new ArrayList<Integer>();
        node = head;
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        Random rand = new Random();
        int index = 0;
        while(node != null){
            if(k8.size() < 8){
                k8.add(node.val); 
            }else{
                //可能被替换的位置
                int operIndex = rand.nextInt(8);

                //(k/i)可能被替换的概率
                int p = rand.nextInt(index);
                if(p < 8){
                    //被替换
                    k8.set(operIndex, node.val);
                }
            }
            node = node.next;
            index++;
        }

        int lenK8 = k8.size();
        return k8.get(rand.nextInt(lenK8));
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */