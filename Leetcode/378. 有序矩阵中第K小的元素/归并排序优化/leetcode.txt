class Solution {
    static class ValOFwhichRows {
        int val;
        int rows;

        public ValOFwhichRows(int val, int rows) {
            this.val = val;
            this.rows = rows;
        }
    }
    public int kthSmallest(int[][] matrix, int k) {
        if (matrix.length == 0)
            return 0;
        int n = matrix.length;
        PriorityQueue<ValOFwhichRows> minHeap = new PriorityQueue<>((a, b) -> {
            if (a.val != b.val)
                return (a.val-b.val);
            else
                return (a.rows- b.rows);
        });
        int[] pointer = new int[n];//记录martix每一行当前待比较的位置
        for (int i = 0; i < n; ++i) {
            ValOFwhichRows node = new ValOFwhichRows(matrix[i][pointer[i]], i);
            minHeap.add(node);
        }
        int cnt=0;
        while (cnt< k-1) {
            ValOFwhichRows node=minHeap.peek();

            if(pointer[node.rows]==n-1){

                node=minHeap.poll();
                cnt++;

                continue;
            }
            node=minHeap.poll();
            cnt++;


            pointer[node.rows]++;
            node.val=matrix[node.rows][pointer[node.rows]];
            minHeap.add(node);
        }

        return minHeap.peek().val;
    }
}