/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        midtraver(root, maxHeap, k);
        return maxHeap.peek();

    }

    public void midtraver(TreeNode root, PriorityQueue<Integer> maxHeap, int k) {
        if (root == null)
            return;
        
        if (maxHeap.size() < k)
            maxHeap.add(root.val);
        else if (maxHeap.peek() > root.val) {
            maxHeap.poll();
            maxHeap.add(root.val);
        }
        midtraver(root.left, maxHeap, k);
        midtraver(root.right, maxHeap, k);
    }
}