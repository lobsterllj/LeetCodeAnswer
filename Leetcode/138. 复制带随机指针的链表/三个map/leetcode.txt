/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null)
            return null;
        Map<Integer, Node> headrandom_sourceindex = new HashMap<>();//原链表 索引--随机节点
        Map<Node,Integer> headnode_headindex=new HashMap<>();//原链表 节点--索引
        Map<Integer,Node> index_node=new HashMap<>();//深拷贝链表 节点--索引
        int index = 0;
        Node deep_copy = new Node(head.val);
        Node copy_pre = new Node(0);
        Node head_pre = new Node(0);
        copy_pre.next = deep_copy;
        head_pre.next = head;
        Node nullnode = new Node(-1);

        while (head.next != null) {
            headnode_headindex.put(head,index);
            index_node.put(index,deep_copy);
            if (head.random == null)
                headrandom_sourceindex.put(index++, nullnode);
            else
                headrandom_sourceindex.put(index++, head.random);
            head = head.next;
            Node cache = new Node(head.val);
            deep_copy.next = cache;
            deep_copy = deep_copy.next;

        }
        headnode_headindex.put(head,index);
        index_node.put(index,deep_copy);
        if (head.random == null)
            headrandom_sourceindex.put(index++, nullnode);
        else
            headrandom_sourceindex.put(index++, head.random);

        Node deep_copy1 = copy_pre.next;
        index=0;
        while (deep_copy1!= null) {
            Node cache_node=headrandom_sourceindex.get(index++);
            if(cache_node.equals(nullnode))
                deep_copy1.random=null;
            else {
                int cache_index=headnode_headindex.get(cache_node);
                deep_copy1.random=index_node.get(cache_index);
            }
            deep_copy1 = deep_copy1.next;
        }
        return copy_pre.next;
    }
}