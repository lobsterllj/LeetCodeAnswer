class Solution {
    public List<List<String>> partition(String s) {
        Solution aa=new Solution();
        List<List<String>> split=new ArrayList<>();
        aa.dfs_sploUo(s,0,new ArrayList<String>() ,split);
        return split;

    }

    public void dfs_sploUo(String s, int index, ArrayList<String> cache, List<List<String>> split) {
        if (index == s.length()) {
            cache = new ArrayList<>(cache);
            split.add(cache);
            return;
        }
        for (int i = index; i < s.length(); ++i) {

            String ss = s.substring(index, i + 1);
            if (!isoUo(ss)) {
                continue;
            }

            cache.add(ss);
            dfs_sploUo(s, i + 1, cache, split);
            cache.remove(cache.size() - 1);
        }
    }
    private boolean isoUo(String s)
    {
        boolean res=true;
        int i=0;
        int j=s.length()-1;
        while (i<j)
        {
            if(s.charAt(i)!=s.charAt(j))
            {
                res=false;
                break;
            }
            i++;
            j--;
        }

        return res;
    }

}