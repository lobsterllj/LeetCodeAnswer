class Solution {
    public void wiggleSort(int[] nums) {
        //找到中位数索引
        int mid = quickSelect(nums, 0, nums.length - 1);

        int n = nums.length;
        int n2 = nums.length / 2;
        int n1 = n - n2;
        int[] nums1 = new int[n1];
        int[] nums2 = new int[n2];
        System.arraycopy(nums, 0, nums1, 0, n1);
        System.arraycopy(nums, n1, nums2, 0, n2);

        for (int i = 0; i < n1; ++i) {
            nums[2 * i] = nums1[n1 - i - 1];
        }
        for (int i = 0; i < n2; ++i) {
            nums[2 * i + 1] = nums2[n2 - i - 1];
        }

    }
    public int quickSelect(int[] nums, int left, int right) {
        int pivot = nums[left];
        //all in [left+1,lt] <pivot
        //all in [lt+1,i-1]  =pivot
        //all in [gt,right]  >pivot
        int lessthanPivotIndex = left;
        int greaterthanPivotIndex = right + 1;
        int i = left + 1;

        while (i < greaterthanPivotIndex) {
            if (nums[i] < pivot) {
                lessthanPivotIndex++;
                swap(nums, i, lessthanPivotIndex);
                i++;
            } else if (nums[i] == pivot) {
                i++;
            } else {
                greaterthanPivotIndex--;
                swap(nums, i, greaterthanPivotIndex);
            }
        }


        swap(nums, left, lessthanPivotIndex);
        //all in [left,lt-1]  <pivot
        //all in [lt,gt-1]    =pivot
        //all in [gt,right]   >pivot

        //快速选择后
        int mid = ((nums.length - 1) >> 1);

        if (lessthanPivotIndex > mid) {
            return quickSelect(nums, left, lessthanPivotIndex - 1);
        } else if (mid > greaterthanPivotIndex - 1) {
            return quickSelect(nums, lessthanPivotIndex + 1, right);
        } else {
            return mid;
        }
    }
    public void swap(int[] nums, int i, int j) {
        int cache = nums[i];
        nums[i] = nums[j];
        nums[j] = cache;
    }
}