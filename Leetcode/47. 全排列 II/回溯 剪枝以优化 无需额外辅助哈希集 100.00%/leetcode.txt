class Solution {
    int n;
    public List<List<Integer>> permuteUnique(int[] nums) {
        n = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        boolean[] visited = new boolean[n];
        List<Integer> cache = new ArrayList<>();
        Arrays.sort(nums);
        add2res(res, cache, nums, visited, 0);
        return res;
    }

    public void add2res(List<List<Integer>> res, List<Integer> cache, int[] nums, boolean[] visited, int index) {
        if (cache.size() == n) {
            List<Integer> temp = new ArrayList<>(cache);
            res.add(temp);
            return;
        }
        for (int i = 0; i < n; ++i) {
            if (visited[i])
                continue;
            if (i > 0 && !visited[i - 1] && nums[i] == nums[i - 1])
                continue;
            visited[i] = true;
            cache.add(nums[i]);
            add2res(res, cache, nums, visited, index + 1);
            cache.remove(cache.size() - 1);
            visited[i] = false;
        }
    }
}