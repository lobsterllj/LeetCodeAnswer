class Solution {
    public int largestRectangleArea(int[] heights) {
        int len = heights.length;
        if (len == 0)
            return 0;
        if (len == 1)
            return heights[0];

        Deque<Integer> stack = new ArrayDeque<>();
        //单调递增栈

        int[] left2right = new int[len];
        stack.addLast(0);
        left2right[0] = -1;
        for (int i = 1; i < len; ++i) {
            while (!stack.isEmpty() && heights[stack.peekLast()] >= heights[i]) {
                stack.pollLast();
            }
            if (stack.isEmpty())
                left2right[i] = -1;
            else {
                left2right[i] = stack.peekLast();
            }
            stack.addLast(i);
        }
        stack.clear();

        int[] right2left = new int[len];
        stack.addLast(len - 1);
        right2left[len - 1] = len;
        for (int i = len - 2; i > -1; --i) {
            while (!stack.isEmpty() && heights[stack.peekLast()] >= heights[i]) {
                stack.pollLast();
            }
            if (stack.isEmpty())
                right2left[i] = len;
            else {
                right2left[i] = stack.peekLast();
            }
            stack.addLast(i);
        }
        stack.clear();
        int res = 0;
        for (int i = 0; i < len; ++i) {
            res = Math.max(heights[i] * (right2left[i] - left2right[i] - 1), res);
        }
        return res;
    }
}