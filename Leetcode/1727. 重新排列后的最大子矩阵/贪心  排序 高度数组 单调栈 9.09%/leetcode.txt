class Solution {
    public int largestSubmatrix(int[][] matrix) {
        int Rows = matrix.length;
        int Cols = matrix[0].length;
        int[][] heights = new int[Rows][Cols];
        for (int col = 0; col < Cols; ++col) {
            heights[0][col] = matrix[0][col];
        }
        for (int row = 1; row < Rows; ++row) {
            for (int col = 0; col < Cols; ++col) {
                if (matrix[row][col] == 1) {
                    heights[row][col] = heights[row - 1][col] + 1;
                }
            }
        }

        for (int row = 0; row < Rows; ++row) {
            Arrays.sort(heights[row]);
        }

        int res = 0;
        for (int row = 0; row < Rows; ++row) {
            int cache = getMaxSquare(heights[row]);
            res = Math.max(res, cache);
        }
        return res;
    }

    public int getMaxSquare(int[] h) {
        int len_h = h.length;

        Deque<Integer> stack = new ArrayDeque<>();
        stack.add(-1);
        int[] leftSubIndex = new int[len_h];
        for (int i = 0; i < len_h; ++i) {
            while (stack.peekLast() != -1 && h[stack.peekLast()] >= h[i]) {
                stack.pollLast();
            }
            leftSubIndex[i] = stack.peekLast();
            stack.add(i);
        }

        Deque<Integer> stack1 = new ArrayDeque<>();
        stack1.add(len_h);
        int[] rightSubIndex = new int[len_h];
        for (int i = len_h - 1; i > -1; --i) {
            while (stack1.peekLast() != len_h && h[stack1.peekLast()] >= h[i]) {
                stack1.pollLast();
            }
            rightSubIndex[i] = stack1.peekLast();
            stack1.add(i);
        }

        int res = 0;
        for (int i = 0; i < len_h; ++i) {
            int cache = h[i] * (rightSubIndex[i] - leftSubIndex[i] - 1);
            res = Math.max(res, cache);
        }

        return res;
    }
}