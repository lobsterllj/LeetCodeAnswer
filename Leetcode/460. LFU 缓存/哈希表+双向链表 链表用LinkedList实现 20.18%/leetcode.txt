class LFUCache {
        //使用频次最小元素的使用频次
        int minfreq;

        //LFUCache容量大小
        int capacity;

        //key_Node 哈希表
        Map<Integer, Node> key_table;

        //freq_doublelinkedlist
        Map<Integer, LinkedList<Node>> freq_list;

        public LFUCache(int capacity) {
            this.capacity = capacity;
            minfreq = 0;
            key_table = new HashMap<>();
            freq_list = new HashMap<>();
        }

        public int get(int key) {
            if (capacity == 0)
                return -1;
            if (!key_table.containsKey(key)) {
                return -1;
            }
            //更新key_table与freq_list
            Node node = key_table.get(key);
            int val = node.val;
            int freq = node.freq;
            freq_list.get(freq).remove(node);

            //如果当前freq对应的freq_list内的链表为空，需要删除此链表
            if (freq_list.get(freq).size() == 0) {
                freq_list.remove(freq);
                //如果此freq为minfreq 当前被查找的元素的freq一定为minfreq 故将minfreq更新为freq + 1 即minfreq + 1
                if (minfreq == freq) {
                    minfreq++;
                }
            }

            //更新节点
            LinkedList<Node> cache = freq_list.getOrDefault(freq + 1, new LinkedList<Node>());
            cache.addFirst(new Node(key, val, freq + 1));
            freq_list.put(freq + 1, cache);
            key_table.put(key, freq_list.get(freq + 1).peekFirst());

            return val;
        }

        public void put(int key, int value) {
            if (capacity == 0) {
                return;
            }
            if (!key_table.containsKey(key)) {
                //如果原表内不含有该元素，故需要添加新元素，可能会导致超出容量范围
                if (key_table.size() == capacity) {
                    Node undeleted = freq_list.get(minfreq).pollLast();
                    key_table.remove(undeleted.key);
                    //如果当前minfreq对应的freq_list内的链表为空，需要删除此链表
                    if (freq_list.get(minfreq).size() == 0) {
                        freq_list.remove(minfreq);
                    }
                }

                //插入节点
                Node node = new Node(key, value, 1);
                LinkedList<Node> list = freq_list.getOrDefault(1, new LinkedList<Node>());
                list.addFirst(node);
                freq_list.put(1, list);
                key_table.put(key, freq_list.get(1).peekFirst());

                minfreq = 1;
            } else {
                //如果原表内已经含有该元素，故没有添加新元素，不会导致超出容量范围
                Node node = key_table.get(key);
                int freq = node.freq;
                freq_list.get(freq).remove(node);

                //如果当前freq对应的freq_list内的链表为空，需要删除此链表
                if (freq_list.get(freq).size() == 0) {
                    freq_list.remove(freq);
                    //如果此freq为minfreq 当前被查找的元素的freq一定为minfreq 故将minfreq更新为freq + 1 即minfreq + 1
                    if (minfreq == freq) {
                        minfreq++;
                    }
                }

                //更新节点
                LinkedList<Node> cache = freq_list.getOrDefault(freq + 1, new LinkedList<Node>());
                cache.addFirst(new Node(key, value, freq + 1));
                freq_list.put(freq + 1, cache);
                key_table.put(key, freq_list.get(freq + 1).peekFirst());

            }
        }
    }

    class Node {
        int key, val, freq;

        Node(int key, int val, int freq) {
            this.key = key;
            this.val = val;
            this.freq = freq;
        }
    }

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */