/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if (head == null)
            return null;
        List<Integer> list = new ArrayList();
        while (head != null){
            list.add(head.val);
            head = head.next;
        }
        int len = list.size();
        return DFS(list, 0, len - 1);
    }
    public TreeNode DFS(List<Integer> list, int sta, int end) {
        if (sta > end){
            return null;
        }
        if (sta == end){
            return new TreeNode(list.get(sta));
        }
        int mid = (sta + end) >>> 1;
        TreeNode root = new TreeNode(list.get(mid));
        root.left = DFS(list, sta, mid - 1);
        root.right = DFS(list, mid + 1, end);
        return root;
    }
}