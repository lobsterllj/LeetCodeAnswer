class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;

        unionFind unionFind = new unionFind(4 * n * n);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                unionFind.union(4 * ((i - 1) * n + j) + 2, 4 * (i * n + j));
            }
        }
        for (int j = 1; j < n; ++j) {
            for (int i = 0; i < n; ++i) {
                unionFind.union(4 * (i * n + (j - 1)) + 1, 4 * (i * n + j) + 3);
            }
        }

        for (int i = 0; i < n; ++i) {
            char[] chars = grid[i].toCharArray();
            for (int j = 0; j < n; ++j) {
                if (chars[j] == ' ') {
                    unionFind.union(4 * (i * n + j), 4 * (i * n + j) + 1);
                    unionFind.union(4 * (i * n + j) + 1, 4 * (i * n + j) + 2);
                    unionFind.union(4 * (i * n + j) + 2, 4 * (i * n + j) + 3);
                } else if (chars[j] == '/') {
                    unionFind.union(4 * (i * n + j), 4 * (i * n + j) + 3);
                    unionFind.union(4 * (i * n + j) + 1, 4 * (i * n + j) + 2);
                } else {
                    unionFind.union(4 * (i * n + j), 4 * (i * n + j) + 1);
                    unionFind.union(4 * (i * n + j) + 2, 4 * (i * n + j) + 3);
                }
            }
        }

        return unionFind.groupNum;
    }

    private class unionFind {
        int[] fathers;
        int[] size;
        int groupNum;

        public unionFind(int n) {
            fathers = new int[n];
            size = new int[n];
            groupNum = n;
            for (int i = 0; i < n; ++i) {
                fathers[i] = i;
                size[i] = 1;
            }
        }

        public int find(int x) {
            if (x != fathers[x]) {
                fathers[x] = find(fathers[x]);
            }
            return fathers[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY)
                return;
            if (size[rootX] < size[rootY]) {
                fathers[rootX] = rootY;
                size[rootY] += size[rootX];
            } else {
                fathers[rootY] = rootX;
                size[rootX] += size[rootY];
            }
            groupNum--;
        }

    }
}