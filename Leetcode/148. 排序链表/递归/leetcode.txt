/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null)
            return head;
        ListNode fast=head.next;
        ListNode slow=head;
        while (fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        ListNode righthead=slow.next;
        slow.next=null;

        ListNode left=sortList(head);
        ListNode right=sortList(righthead);

        return mergeTwoLists(left,right);
    }
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res_pre = new ListNode();
        ListNode res = res_pre;
        while (l1 != null &&l2 != null) {
            if ( l1.val > l2.val) {
                res.next=l2;
                l2 = l2.next;
            } else{
                res.next=l1;
                l1 = l1.next;
            }
            res = res.next;
        }
        res.next=(l1==null)?l2:l1;
        return res_pre.next;
    }
    

    
}