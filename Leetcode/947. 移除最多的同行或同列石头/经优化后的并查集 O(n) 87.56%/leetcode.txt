class Solution {
    class UnionFind {
        Map<Integer, Integer> map;
        int cnts;

        public UnionFind() {
            map = new HashMap<>();
            cnts = 0;
        }

        public int find(int x) {
            if (map.containsKey(x)) {
                int ori=x;
                while (x != map.get(x)) {
                    x = map.get(x);
                }
                map.put(ori, x);
            } else {
                map.put(x, x);
                cnts++;
            }
            return x;
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY)
                return;
            map.put(rootX, rootY);
            cnts--;
        }

        public int getcnts() {
            return cnts;
        }
    }

    public int removeStones(int[][] stones) {
        int num = stones.length;
        if (num == 1)
            return 0;

        UnionFind unionFind = new UnionFind();
        for (int[] it : stones) {
            unionFind.union(it[0] + 11111, it[1]);
        }
        return num - unionFind.getcnts();

    }
}