class Solution {
    class UnionFind {
        int[] fathers;

        public UnionFind(int size) {
            fathers = new int[size];
            for (int i = 0; i < fathers.length; ++i) {
                fathers[i] = i;
            }
        }

        public int find(int x) {
            if (x != fathers[x])
                fathers[x] = find(fathers[x]);
            return fathers[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY)
                return;
            fathers[rootX] = rootY;
        }

        public int getcnts() {
            Set<Integer> set = new HashSet<>();
            for (int i = 0; i < fathers.length; ++i) {
                int father = find(i);
                set.add(father);
            }
            return set.size();
        }
    }

    public int removeStones(int[][] stones) {
        int num = stones.length;
        if (num == 1)
            return 0;
        Map<Integer, int[]> map = new HashMap<>();
        for (int i = 0; i < num; ++i) {
            map.put(i, stones[i]);
        }
        UnionFind unionFind = new UnionFind(num);
        for (int i = 0; i < num; ++i) {
            for (int j = 0; j < num; ++j) {
                if ((stones[i][0] == stones[j][0]) || (stones[i][1] == stones[j][1]))
                    unionFind.union(i, j);
            }
        }
        return num - unionFind.getcnts();

    }
}