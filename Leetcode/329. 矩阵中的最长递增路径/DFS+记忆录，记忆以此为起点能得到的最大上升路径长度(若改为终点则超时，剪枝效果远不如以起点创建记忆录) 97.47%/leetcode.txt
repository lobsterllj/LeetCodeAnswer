class Solution {
    public int row_max;
    public int col_max;

    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length == 0)
            return 0;
        int maxLen = 0;
        row_max = matrix.length;
        col_max = matrix[0].length;
        int[][] memory = new int[row_max][col_max];
        for (int i = 0; i < row_max; ++i) {
            for (int j = 0; j < col_max; ++j)
                maxLen = Math.max(maxLen, dfs(matrix, memory, i, j));
        }
        return maxLen;
    }

    public int dfs(int[][] matrix, int[][] memory, int row, int col) {
        if (memory[row][col] != 0)
            return memory[row][col];
        memory[row][col]++;
        if ((row + 1) < row_max && (matrix[row + 1][col] > matrix[row][col])) {
            memory[row][col] = Math.max(dfs(matrix, memory, row + 1, col) + 1, memory[row][col]);
        }
        if ((col + 1) < col_max && (matrix[row][col + 1] > matrix[row][col])) {
            memory[row][col] = Math.max(dfs(matrix, memory, row, col + 1) + 1, memory[row][col]);
        }
        if ((row - 1) >= 0 && (matrix[row - 1][col] > matrix[row][col])) {
            memory[row][col] = Math.max(dfs(matrix, memory, row - 1, col) + 1, memory[row][col]);
        }
        if ((col - 1) >= 0 && (matrix[row][col - 1] > matrix[row][col])) {
            memory[row][col] = Math.max(dfs(matrix, memory, row, col - 1) + 1, memory[row][col]);
        }
        return memory[row][col];
    }
}