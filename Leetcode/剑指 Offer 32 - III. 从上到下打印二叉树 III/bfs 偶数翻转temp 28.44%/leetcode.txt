/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res=new ArrayList<>();
        if(root==null)
            return res;

        Deque<TreeNode> unvisited=new LinkedList<>();
        unvisited.addLast(root);
        boolean left2right=true;
        while(!unvisited.isEmpty()){
            List<Integer> temp=new LinkedList<>();
            for(int i=unvisited.size();i>0;--i){
                TreeNode cache=unvisited.pollFirst();
                temp.add(cache.val);
                if(cache.left!=null)
                    unvisited.addLast(cache.left);
                if(cache.right!=null)
                    unvisited.addLast(cache.right);
            }
            if(!left2right)
                reverse(temp);
            res.add(temp);  
            left2right=!left2right;

        }
        return res;
    }
    public void reverse(List<Integer> tar){
        int n=tar.size();
        for(int i=0;i<n/2;++i){
            int cache=tar.get(i);
            tar.set(i,tar.get(n-i-1));
            tar.set(n-i-1,cache);
        }
    }
}