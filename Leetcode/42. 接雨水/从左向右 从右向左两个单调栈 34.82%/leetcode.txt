class Solution {
    public int trap(int[] height) {
        int len = height.length;
        if (len < 3)
            return 0;
        int[] left_right = new int[len];
        int[] right_left = new int[len];
        Deque<Integer> l_r = new ArrayDeque<>();
        l_r.addLast(height[0]);
        for (int i = 1; i < len; ++i){
            left_right[i] = l_r.peekLast();
            while(!l_r.isEmpty() && height[i] > l_r.peekLast()){
                l_r.pollLast();
            }
            if(l_r.isEmpty())
                l_r.addLast(height[i]);
        }

        Deque<Integer> r_l = new ArrayDeque<>();
        r_l.addLast(height[len - 1]);
        for (int i = len - 2; i > -1; --i){
            right_left[i] = r_l.peekLast();
            while(!r_l.isEmpty() && height[i] > r_l.peekLast()){
                r_l.pollLast();
            }
            if(r_l.isEmpty())
                r_l.addLast(height[i]);
        }

        int res = 0;
        for (int i = 1; i < len - 1; ++i){
            int lr_height = Math.min(left_right[i], right_left[i]);
            if (lr_height > height[i])
                res += (lr_height - height[i]);
        }

        return res;
    }
}