/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findSecondMinimumValue(TreeNode root) {
        PriorityQueue<Integer> maxHeap=new PriorityQueue<>((a,b)->b-a);
        midtraver(root,maxHeap);
        if(maxHeap.size()==2)
            return maxHeap.peek();
        else 
            return -1;
    }

    public void midtraver(TreeNode root,PriorityQueue<Integer> maxHeap){
        if (root==null)
            return;
        midtraver(root.left,maxHeap);
        if(maxHeap.size()==0)
            maxHeap.add(root.val);
        else if(maxHeap.size()==1&&maxHeap.peek()!= root.val){
            maxHeap.add(root.val);
        }
        else if(maxHeap.size()==2&&maxHeap.peek()> root.val){
            int org=maxHeap.poll();
            if (maxHeap.peek() != root.val)
                maxHeap.add(root.val);
            else {
                maxHeap.add(org);
            }
        }
        midtraver(root.right,maxHeap);
    }
}